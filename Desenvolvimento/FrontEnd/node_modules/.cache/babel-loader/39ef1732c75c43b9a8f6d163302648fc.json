{"remainingRequest":"/home/daniel/Desktop/Git/FrontEnd/node_modules/babel-loader/lib/index.js!/home/daniel/Desktop/Git/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/daniel/Desktop/Git/FrontEnd/src/components/pages/Home.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/daniel/Desktop/Git/FrontEnd/src/components/pages/Home.vue","mtime":1543515300282},{"path":"/home/daniel/Desktop/Git/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1543518246810},{"path":"/home/daniel/Desktop/Git/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1534881725000},{"path":"/home/daniel/Desktop/Git/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.replace\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// O comentário na linha de baixo desbilita os warnings\n\n/* eslint-disable */\n// Imports necessários para fazer a requisição ao servidor\nimport API from '../../services/ApiService'; // Import das funções utilizadas do Vuelidate\n\nimport { required, minLength, between, maxLength, email, numeric } from 'vuelidate/lib/validators';\nexport default {\n  name: \"home\",\n  data: function data() {\n    return {\n      // Variável para controlar a exibição do modal de sucesso no cadastro\n      modalSuccess: false,\n      // Variável para controlar a exibição do modal se algum erro aconteceu \n      // no cadastro\n      modalError: false,\n      // Variável para controlar a exibição do modal de cadastro de empresa\n      modalRegCompShow: false,\n      // Variável para controlar a exibição do modal de cadastro de pessoa\n      modalRegPerShow: false,\n      // Todas as variáveis ficam no objeto formCompany \n      // para a validação adequada das informações da\n      // empresa, e apenas com tudo certo é possível \n      // fazer o envio\n      formCompany: {\n        name: '',\n        email: '',\n        identity: '',\n        user_type: '',\n        password: ''\n      },\n      // Todas as variáveis ficam no objeto formPerson \n      // para a validação adequada das informações da \n      // pessoa, e apenas com tudo certo é possível \n      // fazer o envio\n      formPerson: {\n        name: '',\n        email: '',\n        identity: '',\n        user_type: '',\n        password: ''\n      },\n      // Variável para exibir o erro proveniente das requisições\n      // ao back-end\n      error: null,\n      // Variável que ajuda no redirecionamento para o modal que estava sendo\n      // preenchido quando algum erro ocorre nas requisições (pode assumir valor 'person' ou 'company')\n      whereIsError: null,\n      // Variável que auxilia no redirecionamento do usuário que acabou \n      // de ser cadastrado, para o portal correto\n      redirectTo: null\n    };\n  },\n  methods: {\n    // Método para intermediar o cadastro de empresa\n    redirectRegCompany: function redirectRegCompany($event) {\n      this.formCompany.user_type = 0;\n      this.sendInfoCompany(); // Previne o recarregamento da página (ou seja, que o evento de submit aconteça)\n\n      $event.preventDefault();\n    },\n    // Método para intermediar o cadastro de pessoa\n    redirectRegPerson: function redirectRegPerson($event) {\n      this.formPerson.user_type = 1;\n      this.sendInfoPerson(); // Previne o recarregamento da página (ou seja, que o evento de submit aconteça)\n\n      $event.preventDefault();\n    },\n    // Método para enviar as informações para o cadastro de empresa\n    sendInfoCompany: function sendInfoCompany() {\n      var _this = this;\n\n      // Tratamento do CNPJ\n      var cnpj = this.formCompany.identity;\n      cnpj = cnpj.replace(/[^\\d]/g, \"\"); // Requisição POST para cadastrar na plataforma              \n\n      API.post('/newAccount', {\n        name: this.formCompany.name,\n        email: this.formCompany.email,\n        identity: cnpj,\n        user_type: this.formCompany.user_type,\n        password: this.formCompany.password\n      }).then(function () {\n        // Redireciona para o portal da empresa em caso de sucesso\n        _this.redirectTo = 'company';\n\n        _this.showModalSuccess();\n      }).catch(function (error) {\n        _this.error = error.response.data.message;\n        _this.whereIsError = 'company';\n\n        _this.showModalError();\n      });\n    },\n    // Método para enviar as informações para o cadastro de pessoa\n    sendInfoPerson: function sendInfoPerson() {\n      var _this2 = this;\n\n      // Tratamento do CPF\n      var cpf = this.formPerson.identity;\n      cpf = cpf.replace(/[^\\d]/g, \"\"); // Requisição POST para cadastrar na plataforma              \n\n      API.post('/newAccount', {\n        name: this.formPerson.name,\n        email: this.formPerson.email,\n        identity: cpf,\n        user_type: this.formPerson.user_type,\n        password: this.formPerson.password\n      }).then(function () {\n        // Redireciona para o login em caso de sucesso\n        _this2.redirectTo = 'person';\n\n        _this2.showModalSuccess();\n      }).catch(function (error) {\n        _this2.error = error.response.data.message;\n        _this2.whereIsError = 'person';\n\n        _this2.showModalError();\n      });\n    },\n    // Método que mostra o modal de cadastro de empresa\n    showModalCompany: function showModalCompany() {\n      this.$refs.modalRegCompany.show();\n    },\n    // Método que esconde o modal de cadastro de empresa\n    hideModalCompany: function hideModalCompany() {\n      this.$refs.modalRegCompany.hide();\n    },\n    // Método que mostra o modal de cadastro de pessoa\n    showModalPerson: function showModalPerson() {\n      this.$refs.modalRegPerson.show();\n    },\n    // Método que esconde o modal de cadastro de pessoa\n    hideModalPerson: function hideModalPerson() {\n      this.$refs.modalRegPerson.hide();\n    },\n    // Método que mostra o modal de sucesso no cadastro\n    showModalSuccess: function showModalSuccess() {\n      this.$refs.modalSuccess.show();\n    },\n    // Método que esconde o modal de sucesso no cadastro\n    hideModalSuccess: function hideModalSuccess() {\n      this.$refs.modalSuccess.hide();\n    },\n    // Método que mostra o modal de erro no cadastro\n    showModalError: function showModalError() {\n      this.$refs.modalError.show();\n    },\n    // Método que esconde o modal de erro no cadastro\n    hideModalError: function hideModalError() {\n      this.$refs.modalError.hide();\n    },\n    // Redirecionamento para a mesma página\n    // quando ocorre algum erro no cadastro de empresa ou pessoa\n    redirectError: function redirectError() {\n      if (this.whereIsError == 'person') {\n        this.showModalPerson();\n      } else {\n        this.showModalCompany();\n      } // Limpa a variável por precaução\n\n\n      this.whereIsError = null;\n    },\n    // Redirecionamento para portal de empresa\n    // quando ocorre o cadastro corretamente\n    redirectCompany: function redirectCompany() {\n      var _this3 = this;\n\n      // Requisição POST para fazer o login\n      API.post('/login2', {\n        email: this.formCompany.email,\n        password: this.formCompany.password\n      }).then(function (response) {\n        // Armazena o token recebido do back-end, este que é usado\n        // para recuperar as informações presentes no back-end\n        _this3.$store.commit('setAuthToken', response.data.data.token); // Redireciona para o portal de empresa\n\n\n        _this3.$router.push('/portal-empresa');\n      }).catch(function (error) {\n        _this3.error = error.response.data.message;\n      });\n    },\n    // Redirecionamento para portal de pessoa\n    // quando ocorre o cadastro corretamente\n    redirectPerson: function redirectPerson() {\n      var _this4 = this;\n\n      // Requisição POST para fazer o login\n      API.post('/login2', {\n        email: this.formPerson.email,\n        password: this.formPerson.password\n      }).then(function (response) {\n        // Armazena o token recebido do back-end, este que é usado\n        // para recuperar as informações presentes no back-end\n        _this4.$store.commit('setAuthToken', response.data.data.token); // Redireciona para o portal de pessoa\n\n\n        _this4.$router.push('/portal-pessoa');\n      }).catch(function (error) {\n        _this4.error = error.response.data.message;\n      });\n    }\n  },\n  // Validações, para os forms existentes, feitas com o auxílio do Vuelidate\n  validations: {\n    // Validação do formulário de registro de empresa\n    formCompany: {\n      name: {\n        required: required,\n        maxLength: maxLength(50)\n      },\n      email: {\n        required: required,\n        email: email,\n        maxLength: maxLength(50),\n        // Função de validação para verificar se o e-mail\n        // já está cadastrado em alguma conta\n        isUnique: function isUnique(value) {\n          // Em funções próprias é bom, para quando não tiver\n          // nada no input retornar true\n          if (value === '') return true;\n          return API.post('/isEmailUnique', {\n            email: value\n          }).then(function (response) {\n            console.log(response);\n            return true;\n          }).catch(function () {\n            return false;\n          });\n        }\n      },\n      identity: {\n        required: required,\n        // Função que verifica se o CNPJ informado é válido\n        isValid: function isValid(value) {\n          // Em funções próprias é bom, para quando não tiver\n          // nada no input retornar true\n          if (value === '') return true;\n          var cnpj = value; // Vetor contendo os multiplicadores para o \n          // cálculo dos dígitos verificadores\n\n          var multi = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2]; // Retira qualquer caracter especial do valor proveniente\n\n          if ((cnpj = cnpj.replace(/[^\\d]/g, \"\")).length != 14) return false; // Verifica se só existem 0 nos 14 dígitos\n\n          if (/0{14}/.test(cnpj)) return false; // Cálcula 1º dígito verificador\n\n          for (var i = 0, n = 0; i < 12; n += cnpj[i] * multi[++i]) {\n            ;\n          }\n\n          if (cnpj[12] != ((n %= 11) < 2 ? 0 : 11 - n)) return false; // Cálcula 2º dígito verificador\n\n          for (var i = 0, n = 0; i <= 12; n += cnpj[i] * multi[i++]) {\n            ;\n          }\n\n          if (cnpj[13] != ((n %= 11) < 2 ? 0 : 11 - n)) return false;\n          return true;\n        }\n      },\n      password: {\n        required: required,\n        minLength: minLength(5),\n        isValid: function isValid(value) {\n          // Em funções próprias é bom, para quando não tiver\n          // nada no input retornar true\n          if (value === '') return true; // Verifica se a senha possui pelo menos uma letra maiúscula, uma letra minúscula e um número.\n\n          return /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{5,}$/.test(value);\n        }\n      }\n    },\n    // Validação do formulário de registro de pessoa\n    formPerson: {\n      name: {\n        required: required,\n        maxLength: maxLength(50)\n      },\n      email: {\n        required: required,\n        email: email,\n        maxLength: maxLength(50),\n        // Função de validação para verificar se o e-mail\n        // já está cadastrado em alguma conta\n        isUnique: function isUnique(value) {\n          // Em funções próprias é bom, para quando não tiver\n          // nada no input retornar true\n          if (value === '') return true;\n          return API.post('/isEmailUnique', {\n            email: value\n          }).then(function (response) {\n            console.log(response);\n            return true;\n          }).catch(function () {\n            return false;\n          });\n        }\n      },\n      identity: {\n        required: required,\n        // Função que verifica se o CPF informado é válido\n        isValid: function isValid(value) {\n          // Em funções próprias é bom, para quando não tiver\n          // nada no input retornar true\n          if (value === '') return true;\n          var cpf = value; // Retira qualquer caracter especial do valor proveniente\n          // e verifica se o tamanho é 11\n\n          if ((cpf = cpf.replace(/[^\\d]/g, \"\")).length != 11) return false; // Verifica se só existem 0 nos 11 dígitos\n\n          if (/0{11}/.test(cpf)) return false;\n          var r;\n          var s = 0; // Cálcula 1º dígito verificador\n\n          for (var i = 1, s = 0; i <= 9; s += parseInt(cpf[i - 1]) * (11 - i++)) {\n            ;\n          }\n\n          r = s * 10 % 11;\n          if (r == 10 || r == 11) r = 0;\n          if (r != parseInt(cpf[9])) return false; // Cálcula 2º dígito verificador                   \n\n          for (var i = 1, s = 0; i <= 10; s += parseInt(cpf[i - 1]) * (12 - i++)) {\n            ;\n          }\n\n          r = s * 10 % 11;\n          if (r == 10 || r == 11) r = 0;\n          if (r != parseInt(cpf[10])) return false;\n          return true;\n        }\n      },\n      password: {\n        required: required,\n        minLength: minLength(5),\n        isValid: function isValid(value) {\n          // Em funções próprias é bom, para quando não tiver\n          // nada no input retornar true\n          if (value === '') return true; // Verifica se a senha possui pelo menos uma letra maiúscula, uma letra minúscula e um número.\n\n          return /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{5,}$/.test(value);\n        }\n      }\n    }\n  }\n};",{"version":3,"sources":["Home.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <!-- Seção de boa-vindas na página home -->    \n    <section>\n        <section class=\"welcome-section d-flex align-items-center\">\n            <b-container class=\"text-center text-dark\">\n                <h1 class=\"inicio\">Bem-vindo ao Match de Currículos</h1>  \n            </b-container>\n        </section>\n        <b-container class=\"p-3\">                        \n            <!-- Para lembrar: user_type = 0 para empresa e user_type = 1 para pessoa -->\n            <!-- Seção contendo os botões de cadastro -->\n            <section class=\"p-3\">                        \n                <b-row class=\"text-center\">\n                    <b-col class=\"mt-3\">\n                        <!-- Botão para abrir o modal de cadastro de empresas -->\n                        <b-btn variant=\"outline-dark\" size=\"lg\" @click=\"showModalCompany\"> \n                            Cadastrar empresa \n                        </b-btn>\n                    </b-col>\n                    <b-col class=\"mt-3\">\n                        <!-- Botão para abrir o modal de cadastro de pessoas -->\n                        <b-btn variant=\"outline-dark\" size=\"lg\" @click=\"showModalPerson\">\n                            Cadastrar pessoa\n                        </b-btn>\n                    </b-col>\n                </b-row>                        \n            </section>            \n        </b-container>\n\n        <!-- Modal do cadastro de empresas -->\n        <b-modal class=\"text-dark w-50 float-left\"\n            hide-footer\n            :centered=\"true\"\n            title=\"Cadastro de Empresas\"\n            size=\"lg\"\n            ref=\"modalRegCompany\">                  \n        \n            <!-- Modal body -->\n            <div class=\"modal-body\">\n                <!-- Formulário de empresa, contém: nome, email, cnpj, senha e tipo de usuário(empresa = 0) -->\n                <b-form id=\"companyForm\" @submit=\"redirectRegCompany\">\n                    <!-- Nome -->\n                    <b-form-group \n                        label=\"Nome *\"\n                        label-for=\"companyName\">                        \n                        <b-form-input id=\"companyName\"                            \n                            type=\"text\"                             \n                            v-model.trim=\"formCompany.name\"\n                            :state=\"!$v.formCompany.name.$invalid\"\n                            aria-describedby=\"inputCompanyNameFeedback\"\n                            placeholder=\"Digite o nome da empresa...\" required></b-form-input>\n\n                        <b-form-invalid-feedback id=\"inputCompanyNameFeedback\">\n                            <p v-if=\"!$v.formCompany.name.required\">\n                                Preencha este campo.\n                            </p> \n                            <p v-else-if=\"!$v.formCompany.name.maxLength\">\n                                O nome pode ter no máximo tamanho 50.\n                            </p>                            \n                        </b-form-invalid-feedback>\n                    </b-form-group>\n\n                    <!-- E-mail -->\n                    <b-form-group\n                        label=\"E-mail *\"\n                        label-for=\"companyEmail\">\n                        <b-form-input type=\"email\" \n                            :value=\"formCompany.email\"\n                            @change.native=\"formCompany.email = $event.target.value\"\n                            :state=\"!$v.formCompany.email.$invalid\"\n                            aria-describedby=\"inputCompanyEmailFeedback\"\n                            placeholder=\"nome@dominio.com\" required></b-form-input>\n                        <b-form-invalid-feedback id=\"inputCompanyEmailFeedback\">\n                            <p v-if=\"!$v.formCompany.email.required\">\n                                Preencha este campo.\n                            </p> \n                            <p v-else-if=\"!$v.formCompany.email.email\">\n                                Digite um e-mail válido.\n                            </p>\n                            <p v-else-if=\"!$v.formCompany.email.maxLength\">\n                                O e-mail pode ter no máximo tamanho 50.\n                            </p> \n                            <p v-else-if=\"!$v.formCompany.email.isUnique\">\n                                Esse e-mail já é utilizado.\n                            </p> \n                        </b-form-invalid-feedback>\n                    </b-form-group>\n\n                    <!-- CNPJ -->\n                    <b-form-group\n                        label=\"CNPJ *\"\n                        label-for=\"companyIdentity\">\n                        <b-form-input type=\"text\"\n                            id=\"companyIdentity\"\n                            v-model.trim=\"formCompany.identity\"\n                            :state=\"!$v.formCompany.identity.$invalid\"\n                            aria-describedby=\"inputCompanyIdentityFeedback\"\n                            placeholder=\"XX.XXX.XXX/XXXX-XX\"></b-form-input>\n\n                        <b-form-invalid-feedback id=\"inputCompanyIdentityFeedback\">\n                            <p v-if=\"!$v.formCompany.identity.required\">\n                                Preencha este campo.\n                            </p>\n                            <p v-else-if=\"!$v.formCompany.identity.isValid\">\n                                O CNPJ informado não é válido.\n                            </p> \n                        </b-form-invalid-feedback>\n                    </b-form-group>\n\n                    <!-- Senha -->\n                    <b-form-group\n                        label=\"Senha *\"\n                        label-for=\"companyPassword\">\n                        <b-form-input type=\"password\"\n                            id=\"companyPassword\"\n                            v-model.trim=\"formCompany.password\"\n                            :state=\"!$v.formCompany.password.$invalid\"\n                            aria-describedby=\"inputCompanyPasswordFeedback\" required></b-form-input>\n                        \n                        <b-form-invalid-feedback id=\"inputCompanyPasswordFeedback\">\n                            <p v-if=\"!$v.formCompany.password.required\">\n                                Preencha este campo.\n                            </p>\n                            <p v-else-if=\"!$v.formCompany.password.minLength\">\n                                A senha deve possuir no mínimo tamanho 5.\n                            </p> \n                            <p v-else-if=\"!$v.formCompany.password.isValid\">\n                                A senha deve possuir no mínimo uma letra maiúscula, uma letra minúscula e um número.\n                            </p> \n                        </b-form-invalid-feedback>    \n                    </b-form-group>\n\n                    <!-- Modal footer (Quando há o clique no botão enviar \n                         a variável user_type recebe 0 na função de validate) -->\n                    <div class=\"modal-footer\">              \n                        <b-btn variant=\"outline-danger\" @click=\"hideModalCompany\">Fechar</b-btn>\n                        <b-btn :disabled=\"$v.formCompany.$invalid\" variant=\"outline-success\" type=\"submit\">Enviar</b-btn>\n                    </div>\n                </b-form>\n            </div>\n        </b-modal>\n\n        <!-- Modal do cadastro de pessoas -->\n        <b-modal class=\"text-dark w-50 float-left\"\n            hide-footer\n            :centered=\"true\"\n            title=\"Cadastro de Pessoas\"\n            size=\"lg\"\n            ref=\"modalRegPerson\">   \n\n            <!-- Modal body -->\n            <div class=\"modal-body\">\n                <!-- Formulário de pessoa, contém: nome, email, cpf, senha e tipo de usuário(pessoa = 1) -->\n                <b-form id=\"personForm\" @submit=\"redirectRegPerson\">                    \n                    <!-- Nome -->\n                    <b-form-group\n                        label=\"Nome *\"\n                        label-for=\"personName\">                \n                        <b-form-input id=\"personName\"                        \n                            type=\"text\"                             \n                            v-model.trim=\"formPerson.name\"\n                            :state=\"!$v.formPerson.name.$invalid\"\n                            aria-describedby=\"inputPersonNameFeedback\"\n                            placeholder=\"Digite o seu nome...\" required></b-form-input>\n                        <b-form-invalid-feedback id=\"inputCompanyNameFeedback\">\n                            <p v-if=\"!$v.formCompany.name.required\">\n                                Preencha este campo.\n                            </p> \n                            <p v-else-if=\"!$v.formCompany.name.maxLength\">\n                                O nome pode ter no máximo tamanho 50.\n                            </p>                            \n                        </b-form-invalid-feedback>\n                    </b-form-group>\n\n                    <!-- E-mail -->\n                    <b-form-group\n                        label=\"E-mail *\"\n                        label-for=\"personEmail\">\n                        <b-form-input type=\"email\" \n                            :value=\"formPerson.email\"\n                            @change.native=\"formPerson.email = $event.target.value\"\n                            ref=\"personEmail\"\n                            :state=\"!$v.formPerson.email.$invalid\"\n                            aria-describedby=\"inputPersonEmailFeedback\"\n                            placeholder=\"nome@dominio.com\" required></b-form-input>\n                        <b-form-invalid-feedback id=\"inputPersonEmailFeedback\">\n                            <p v-if=\"!$v.formPerson.email.required\">\n                                Preencha este campo.\n                            </p> \n                            <p v-else-if=\"!$v.formPerson.email.email\">\n                                Digite um e-mail válido.\n                            </p>\n                            <p v-else-if=\"!$v.formPerson.email.maxLength\">\n                                O e-mail pode ter no máximo tamanho 50.\n                            </p> \n                            <p v-else-if=\"!$v.formPerson.email.isUnique\">\n                                Esse e-mail já é utilizado.\n                            </p> \n                        </b-form-invalid-feedback>\n                    </b-form-group>\n\n                    <!-- CPF -->\n                    <b-form-group\n                        label=\"CPF *\"\n                        label-for=\"personIdentity\">\n                        <b-form-input type=\"text\"\n                            id=\"personIdentity\"\n                            v-model.trim=\"formPerson.identity\"\n                            :state=\"!$v.formPerson.identity.$invalid\"\n                            aria-describedby=\"inputPersonIdentityFeedback\"\n                            placeholder=\"XXX.XXX.XXX-XX\"></b-form-input>\n\n                        <b-form-invalid-feedback id=\"inputPersonIdentityFeedback\">\n                            <p v-if=\"!$v.formPerson.identity.required\">\n                                Preencha este campo.\n                            </p>\n                            <p v-else-if=\"!$v.formPerson.identity.isValid\">\n                                O CPF informado não é válido.\n                            </p> \n                        </b-form-invalid-feedback>\n                    </b-form-group>\n\n                    <!-- Senha -->\n                    <b-form-group\n                        label=\"Senha *\"\n                        label-for=\"personPassword\">\n                        <b-form-input type=\"password\"\n                            id=\"personPassword\"\n                            v-model.trim=\"formPerson.password\"\n                            :state=\"!$v.formPerson.password.$invalid\"\n                            aria-describedby=\"inputPersonPasswordFeedback\" required></b-form-input>\n                        \n                        <b-form-invalid-feedback id=\"inputPersonPasswordFeedback\">\n                            <p v-if=\"!$v.formPerson.password.required\">\n                                Preencha este campo.\n                            </p>\n                            <p v-else-if=\"!$v.formPerson.password.minLength\">\n                                A senha deve possuir no mínimo tamanho 5.\n                            </p> \n                            <p v-else-if=\"!$v.formPerson.password.isValid\">\n                                A senha deve possuir no mínimo uma letra maiúscula, uma letra minúscula e um número.\n                            </p> \n                        </b-form-invalid-feedback>    \n                    </b-form-group>\n\n                    <!-- Modal footer (Quando há o clique no botão enviar \n                         a variável user_type recebe 1 na função de validate) -->\n                    <div class=\"modal-footer\">              \n                        <b-btn variant=\"outline-danger\" @click=\"hideModalPerson\">Fechar</b-btn>\n                        <b-btn :disabled=\"$v.formPerson.$invalid\" variant=\"outline-success\" type=\"submit\">Enviar</b-btn>\n                    </div>\n                </b-form>\n            </div>    \n        </b-modal>\n\n        <!-- Modal de sucesso -->\n        <b-modal hide-footer\n            hide-header-close\n            :hide-header=\"true\"\n            :centered=\"true\"\n            :no-close-on-backdrop=\"true\"\n            :no-close-on-esc=\"true\"            \n            size=\"sm\"\n            ref=\"modalSuccess\"> \n            \n            <!-- Título do modal -->   \n            <div class=\"modal-title\">\n                <b-row  align-h=\"center\">\n                    <h4><strong>Conta cadastrada</strong></h4>\n                </b-row>                \n            </div>\n            \n            <!-- Separação título e body -->\n            <hr/>\n\n            <!-- Modal body -->\n            <b-row align-h=\"center\">\n                O cadastro ocorreu com sucesso.\n            </b-row>                            \n            <b-row class=\"mt-2\" align-h=\"center\">\n                <b-button v-if=\"redirectTo == 'company'\" size=\"md\" variant=\"outline-primary\" @click=\"redirectCompany\">\n                    Acessar\n                </b-button>\n                <b-button v-else size=\"md\" variant=\"outline-primary\" @click=\"redirectPerson\">\n                    Acessar\n                </b-button>\n            </b-row>\n        </b-modal>               \n        \n        <!-- Modal de erro -->\n        <b-modal hide-footer\n            hide-header-close\n            :hide-header=\"true\"\n            :centered=\"true\"\n            :no-close-on-backdrop=\"true\"\n            :no-close-on-esc=\"true\"            \n            size=\"sm\"\n            ref=\"modalError\">  \n\n            <!-- Título do modal -->\n            <div class=\"modal-title\">\n                <b-row align-h=\"center\">\n                    <h4><strong>Algo deu errado...</strong></h4>\n                </b-row>                \n            </div>\n\n            <!-- Separação título e body -->\n            <hr/>\n\n            <!-- Modal body -->\n            <b-row align-h=\"center\">\n                <b-col cols=\"8\">{{ error }}</b-col>\n            </b-row>                            \n            <b-row class=\"mt-2\" align-h=\"center\">\n                <b-button size=\"md\" variant=\"outline-primary\" @click=\"redirectError\">\n                    Tentar outra vez\n                </b-button>\n            </b-row>            \n        </b-modal>\n    </section>\n</template>\n\n<script>\n    // O comentário na linha de baixo desbilita os warnings\n/* eslint-disable */\n\n// Imports necessários para fazer a requisição ao servidor\nimport API from '../../services/ApiService';\n\n// Import das funções utilizadas do Vuelidate\nimport {    required, \n            minLength, \n            between, \n            maxLength, \n            email, \n            numeric } from 'vuelidate/lib/validators'\n\nexport default {\n    name:\"home\",\n    data () {\n        return {\n            // Variável para controlar a exibição do modal de sucesso no cadastro\n            modalSuccess: false,\n\n            // Variável para controlar a exibição do modal se algum erro aconteceu \n            // no cadastro\n            modalError: false,\n\n            // Variável para controlar a exibição do modal de cadastro de empresa\n            modalRegCompShow: false,\n\n            // Variável para controlar a exibição do modal de cadastro de pessoa\n            modalRegPerShow: false,\n\n            // Todas as variáveis ficam no objeto formCompany \n            // para a validação adequada das informações da\n            // empresa, e apenas com tudo certo é possível \n            // fazer o envio\n            formCompany: {\n                name: '',\n                email: '',\n                identity: '',\n                user_type: '',\n                password: '',                \n            },\n            \n            // Todas as variáveis ficam no objeto formPerson \n            // para a validação adequada das informações da \n            // pessoa, e apenas com tudo certo é possível \n            // fazer o envio\n            formPerson: {\n                name: '',\n                email: '',\n                identity: '',\n                user_type: '',\n                password: '',\n            },\n            \n            // Variável para exibir o erro proveniente das requisições\n            // ao back-end\n            error: null,\n            \n            // Variável que ajuda no redirecionamento para o modal que estava sendo\n            // preenchido quando algum erro ocorre nas requisições (pode assumir valor 'person' ou 'company')\n            whereIsError: null,\n\n            // Variável que auxilia no redirecionamento do usuário que acabou \n            // de ser cadastrado, para o portal correto\n            redirectTo: null,\n        }\n    },\n    methods: {\n        // Método para intermediar o cadastro de empresa\n        redirectRegCompany($event) {            \n            this.formCompany.user_type = 0;\n            this.sendInfoCompany();\n\n            // Previne o recarregamento da página (ou seja, que o evento de submit aconteça)\n            $event.preventDefault();\n        },\n\n        // Método para intermediar o cadastro de pessoa\n        redirectRegPerson($event) {\n            this.formPerson.user_type = 1;\n            this.sendInfoPerson();\n\n            // Previne o recarregamento da página (ou seja, que o evento de submit aconteça)\n            $event.preventDefault();\n        },\n\n        // Método para enviar as informações para o cadastro de empresa\n        sendInfoCompany() {      \n            // Tratamento do CNPJ\n            let cnpj = this.formCompany.identity;\n            cnpj = cnpj.replace(/[^\\d]/g,\"\");\n\n            // Requisição POST para cadastrar na plataforma              \n            API.post('/newAccount', {\n                name: this.formCompany.name,\n                email: this.formCompany.email,\n                identity: cnpj,\n                user_type: this.formCompany.user_type,\n                password: this.formCompany.password\n            }).then(() => {\n                // Redireciona para o portal da empresa em caso de sucesso\n                this.redirectTo = 'company';\n                this.showModalSuccess();                \n            }).catch(error => {\n                this.error = error.response.data.message;\n                this.whereIsError = 'company';\n                this.showModalError();\n            }); \n        },\n\n        // Método para enviar as informações para o cadastro de pessoa\n        sendInfoPerson() {      \n            // Tratamento do CPF\n            let cpf = this.formPerson.identity;\n            cpf = cpf.replace(/[^\\d]/g,\"\");\n            \n            // Requisição POST para cadastrar na plataforma              \n            API.post('/newAccount', {\n                name: this.formPerson.name,\n                email: this.formPerson.email,\n                identity: cpf,\n                user_type: this.formPerson.user_type,\n                password: this.formPerson.password\n            }).then(() => {\n                // Redireciona para o login em caso de sucesso\n                this.redirectTo = 'person';\n                this.showModalSuccess();\n            }).catch(error => {\n                this.error = error.response.data.message;\n                this.whereIsError = 'person';\n                this.showModalError();\n            }); \n        },\n\n        // Método que mostra o modal de cadastro de empresa\n        showModalCompany () {\n            this.$refs.modalRegCompany.show();\n        },\n\n        // Método que esconde o modal de cadastro de empresa\n        hideModalCompany () {\n            this.$refs.modalRegCompany.hide();\n        },\n\n        // Método que mostra o modal de cadastro de pessoa\n        showModalPerson () {\n            this.$refs.modalRegPerson.show();\n        },\n        \n        // Método que esconde o modal de cadastro de pessoa\n        hideModalPerson () {\n            this.$refs.modalRegPerson.hide();\n        },\n        \n        // Método que mostra o modal de sucesso no cadastro\n        showModalSuccess () {\n            this.$refs.modalSuccess.show();\n        },\n\n        // Método que esconde o modal de sucesso no cadastro\n        hideModalSuccess () {\n            this.$refs.modalSuccess.hide();\n        },\n\n        // Método que mostra o modal de erro no cadastro\n        showModalError () {\n            this.$refs.modalError.show();\n        },\n\n        // Método que esconde o modal de erro no cadastro\n        hideModalError () {\n            this.$refs.modalError.hide();\n        },\n\n        // Redirecionamento para a mesma página\n        // quando ocorre algum erro no cadastro de empresa ou pessoa\n        redirectError() {\n            if(this.whereIsError == 'person') {\n                this.showModalPerson();\n            } else {\n                this.showModalCompany();\n            }\n\n            // Limpa a variável por precaução\n            this.whereIsError = null;\n        },\n        \n\n        // Redirecionamento para portal de empresa\n        // quando ocorre o cadastro corretamente\n        redirectCompany () {\n            // Requisição POST para fazer o login\n            API.post('/login2', {\n                email: this.formCompany.email,\n                password: this.formCompany.password\n            }).then(response => {\n                // Armazena o token recebido do back-end, este que é usado\n                // para recuperar as informações presentes no back-end\n                this.$store.commit('setAuthToken', response.data.data.token);\n                // Redireciona para o portal de empresa\n                this.$router.push('/portal-empresa');\n            }).catch(error => {\n                this.error = error.response.data.message;\n            });\n        },\n\n        // Redirecionamento para portal de pessoa\n        // quando ocorre o cadastro corretamente\n        redirectPerson () {\n            // Requisição POST para fazer o login\n            API.post('/login2', {\n                email: this.formPerson.email,\n                password: this.formPerson.password\n            }).then(response => {\n                // Armazena o token recebido do back-end, este que é usado\n                // para recuperar as informações presentes no back-end\n                this.$store.commit('setAuthToken', response.data.data.token);                \n                // Redireciona para o portal de pessoa\n                this.$router.push('/portal-pessoa');\n            }).catch(error => {\n                this.error = error.response.data.message;\n            });\n        },\n\n    },\n\n    // Validações, para os forms existentes, feitas com o auxílio do Vuelidate\n    validations: {\n        // Validação do formulário de registro de empresa\n        formCompany: {\n            name: {                \n                required,\n                maxLength: maxLength(50)\n            },\n            email: {\n                required,\n                email,\n                maxLength: maxLength(50),\n\n                // Função de validação para verificar se o e-mail\n                // já está cadastrado em alguma conta\n                isUnique(value) {\n                    // Em funções próprias é bom, para quando não tiver\n                    // nada no input retornar true\n                    if(value === '') return true;\n\n                    return  API.post('/isEmailUnique',{\n                                email: value\n                            }).then(response => {\n                                console.log(response);\n                                return true;\n                            }).catch(() => {\n                                return false\n                            });                    \n                },\n            },\n            identity: {\n                required,\n\n                // Função que verifica se o CNPJ informado é válido\n                isValid(value) {\n                    // Em funções próprias é bom, para quando não tiver\n                    // nada no input retornar true\n                    if(value === '') return true;\n                    \n                    var cnpj = value;\n                    \n                    // Vetor contendo os multiplicadores para o \n                    // cálculo dos dígitos verificadores\n                    var multi = [6,5,4,3,2,9,8,7,6,5,4,3,2];\n                    \n                    // Retira qualquer caracter especial do valor proveniente\n                    if((cnpj = cnpj.replace(/[^\\d]/g,\"\")).length != 14)\n                        return false;\n\n                    // Verifica se só existem 0 nos 14 dígitos\n                    if(/0{14}/.test(cnpj))                        \n                        return false;\n\n                    // Cálcula 1º dígito verificador\n                    for (var i = 0, n = 0; i < 12; n += cnpj[i] * multi[++i]);\n                    if(cnpj[12] != (((n %= 11) < 2) ? 0 : 11 - n))\n                        return false;\n                    \n                    // Cálcula 2º dígito verificador\n                    for (var i = 0, n = 0; i <= 12; n += cnpj[i] * multi[i++]);\n                    if(cnpj[13] != (((n %= 11) < 2) ? 0 : 11 - n))\n                        return false;\n\n                    return true;\n                }\n                \n            },\n            password: {\n                required,\n                minLength: minLength (5),\n                isValid(value) {\n                    // Em funções próprias é bom, para quando não tiver\n                    // nada no input retornar true\n                    if(value === '') return true;\n                    \n                    // Verifica se a senha possui pelo menos uma letra maiúscula, uma letra minúscula e um número.\n                    return /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{5,}$/.test(value);\n                }\n            }\n        },\n\n        // Validação do formulário de registro de pessoa\n        formPerson: {\n            name: {                \n                required,\n                maxLength: maxLength(50)\n            },\n            email: {\n                required,\n                email,\n                maxLength: maxLength(50),\n\n                // Função de validação para verificar se o e-mail\n                // já está cadastrado em alguma conta\n                isUnique(value) {\n                    // Em funções próprias é bom, para quando não tiver\n                    // nada no input retornar true\n                    if(value === '') return true;\n\n                    return  API.post('/isEmailUnique',{\n                                email: value\n                            }).then(response => {\n                                console.log(response);\n                                return true;\n                            }).catch(() => {\n                                return false\n                            });                    \n                },\n            },\n            identity: {\n                required,\n\n                // Função que verifica se o CPF informado é válido\n                isValid(value) {  \n                    // Em funções próprias é bom, para quando não tiver\n                    // nada no input retornar true\n                    if(value === '') return true;\n                    \n                    var cpf = value;\n                    \n                    // Retira qualquer caracter especial do valor proveniente\n                    // e verifica se o tamanho é 11\n                    if((cpf = cpf.replace(/[^\\d]/g,\"\")).length != 11)\n                        return false;\n                    \n                    // Verifica se só existem 0 nos 11 dígitos\n                    if(/0{11}/.test(cpf))                        \n                        return false;\n                        \n                    var r;\n                    var s = 0;   \n                    \n                    // Cálcula 1º dígito verificador\n                    for (var i = 1, s = 0; i <= 9; s += parseInt(cpf[i-1]) * (11 - i++));\n\n                    r = (s * 10) % 11;\n                    if ((r == 10) || (r == 11)) \n                        r = 0;\n\n                    if (r != parseInt(cpf[9]))\n                        return false;\n\n                    // Cálcula 2º dígito verificador                   \n                    for (var i = 1, s = 0; i <= 10; s += parseInt(cpf[i-1]) * (12 - i++));\n\n                    r = (s * 10) % 11;\n                    if ((r == 10) || (r == 11)) \n                        r = 0;\n\n                    if (r != parseInt(cpf[10]))\n                        return false;\n\n                    return true;   \n                }          \n            },\n            password: {\n                required,\n                minLength: minLength (5),\n                isValid(value) {\n                    // Em funções próprias é bom, para quando não tiver\n                    // nada no input retornar true\n                    if(value === '') return true;\n                    \n                    // Verifica se a senha possui pelo menos uma letra maiúscula, uma letra minúscula e um número.\n                    return /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{5,}$/.test(value);\n                }\n            }\n        },\n    },\n}\n\n</script>\n\n<style>\n\n.welcome-section {\n    /* background-color: rgba(17, 0, 255, 0.336); */\n    background-image: url(\"/imagens/fundo.jpg\");\n    background-repeat: repeat-x;\n    opacity: 0.7;\n    filter: alpha(opacity=70); /* For IE8 and earlier */\n}\n.inicio {\n    \n    color: rgb(255, 255, 255);\n    text-shadow: 3px 2px rgb(0, 0, 0);\n    text-align: center;\n    font-size: 400%;\n    \n}\n  \n.welcome-section {\n    min-height: 100px;\n}\n  \n@media (min-width: 576px) {\n    .welcome-section {\n        min-height: 400px;\n    }\n}\n  \n@media (min-width: 768px) {\n    .welcome-section {\n        min-height: 550px;\n    }\n}\n\nform :invalid {\n    background: rgba(255, 0, 0, 0.171);\n}\n</style>\n"],"sourceRoot":"src/components/pages"}]}